/*
_____---------______--____--__--__--____------____--__----____--__----__--__--____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   0   | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   93 A0 0
                      s  m2  m1  m0     T   |            address            |            command            |
// 93 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888,
// --__----__--__--
// 0 | 0 | 1 | 1 | 1
//444, 444, 888, 444, 444, 444, 444,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

_____---------______--____--__--__------____--____--__----____--__----__--__--____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   1   | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   93 A0 1
// 93 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888,
//444, 444, 888, 444, 444, 444, 444,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

_____---------______--____--__--__--____------____--__----____----____--__----____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   0   | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   94 A0 0
// 94 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 888, 888, 444, 444, 888, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888,
//----____--__----
//0 | 1 | 0 | 0 | 1
//888, 888, 444, 444, 888,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

_____---------______--____--__--__------____--____--__----____----____--__----____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   1   | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   94 A0 1
// 94 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 888, 888, 444, 444, 888, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888,
//888, 888, 444, 444, 888,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

_____---------______--____--__--__--____------____--__----____----____----__--____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   0   | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   95 A0 0
// 95 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 888, 888, 888, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888,
//----____----__--
//0 | 1 | 0 | 1 | 1
//888, 888, 888, 444, 444,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

_____---------______--____--__--__------____--____--__----____----____----__--____----____--__--__--__--__--___________
                    | 1 | 0 | 0 | 0 |   1   | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   95 A0 1
// 95 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 888, 888, 888, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
//27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888,
//888, 888, 888, 444, 444,
//888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,

*/

const uint32_t test_decoder_rc6_input1[] = {
// 94 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 888, 888, 444, 444, 888, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
// 93 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
    //      failed 95
    27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 888, 888, 888, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 888,
// 93 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
// 94 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 888, 888, 444, 444, 888, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
// 95 A0 0
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 444 + 444, 888 + 444, 888, 444, 444, 888, 888, 888, 888, 888, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
    //    failed 93 + 1 sample
    27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
    //    failed 93
    27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 888, 444, 444,
    //    failed 93
    27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 888,
// 95 A0 1
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444 + 888, 888, 444, 888, 444, 444, 888, 888, 888, 888, 888, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
};

const InfraredMessage test_decoder_rc6_expected1[] = {
    {InfraredProtocolRC6,     0x94,      0xA0,  false}, // toggle 0
    {InfraredProtocolRC6,     0x93,      0xA0,  false}, // toggle 1
//    {InfraredProtocolRC6,     0x95,      0xA0,  false},       failed
    {InfraredProtocolRC6,     0x93,      0xA0,  false}, // toggle 0
    {InfraredProtocolRC6,     0x94,      0xA0,  false}, // toggle 1
    {InfraredProtocolRC6,     0x95,      0xA0,  false}, // toggle 0
//    {InfraredProtocolRC6,     0x93,      0xA0,  false},       failed
//    {InfraredProtocolRC6,     0x93,      0xA0,  false},       failed
//    {InfraredProtocolRC6,     0x93,      0xA0,  false},       failed
    {InfraredProtocolRC6,     0x95,      0xA0,  false}, // toggle 1
};

const InfraredMessage test_encoder_rc6_input1[] = {
    {InfraredProtocolRC6,     0x93,      0xA0,  false}, // Toggle 0
    {InfraredProtocolRC6,     0x93,      0xA0,  true},  // Toggle 0
    {InfraredProtocolRC6,     0x93,      0xA1,  false}, // Toggle 1
    {InfraredProtocolRC6,     0x93,      0xA1,  true},  // Toggle 1
    {InfraredProtocolRC6,     0x93,      0xA1,  true},  // Toggle 1
    {InfraredProtocolRC6,     0x93,      0xA0,  false}, // Toggle 0
    {InfraredProtocolRC6,     0x93,      0xA0,  false}, // Toggle 1
    {InfraredProtocolRC6,     0x93,      0xA0,  true},  // Toggle 1
};

const uint32_t test_encoder_rc6_expected1[] = {
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 888, 888+444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 888, 888+444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444+888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 888,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444+888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 888,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444+888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 888,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444, 888, 888+444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444+888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
27000, 2666, 889, 444, 888, 444, 444, 444, 444, 444+888, 888, 444, 888, 444, 444, 888, 888, 444, 444, 888, 444, 444, 444, 444, 888, 888, 888, 444, 444, 444, 444, 444, 444, 444, 444, 444,
};


const InfraredMessage test_rc6[] = {
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 0
    {InfraredProtocolRC6,     0x80,      0x00,  false},     // t 1
    {InfraredProtocolRC6,     0x80,      0x01,  false},     // t 0
    {InfraredProtocolRC6,     0x00,      0x01,  false},     // t 1
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 0
    {InfraredProtocolRC6,     0x00,      0x00,  true},      // t 0
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 1
    {InfraredProtocolRC6,     0x00,      0x00,  true},      // t 1
    {InfraredProtocolRC6,     0xFF,      0xFF,  false},     // t 0
    {InfraredProtocolRC6,     0x7F,      0xFF,  false},     // t 1
    {InfraredProtocolRC6,     0x7F,      0xFE,  false},     // t 0
    {InfraredProtocolRC6,     0xFF,      0xFE,  false},     // t 1
    {InfraredProtocolRC6,     0xFF,      0xFF,  false},     // t 0
    {InfraredProtocolRC6,     0xFF,      0xFF,  true},      // t 0
    {InfraredProtocolRC6,     0xAA,      0x55,  false},     // t 1
    {InfraredProtocolRC6,     0x55,      0xAA,  false},     // t 0
    {InfraredProtocolRC6,     0x55,      0x55,  false},     // t 1
    {InfraredProtocolRC6,     0xAA,      0xAA,  false},     // t 0
    {InfraredProtocolRC6,     0xAA,      0xAA,  true},      // t 0
// same with inverted toggle bit
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 1
    {InfraredProtocolRC6,     0x80,      0x00,  false},     // t 0
    {InfraredProtocolRC6,     0x80,      0x01,  false},     // t 1
    {InfraredProtocolRC6,     0x00,      0x01,  false},     // t 0
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 1
    {InfraredProtocolRC6,     0x00,      0x00,  true},      // t 1
    {InfraredProtocolRC6,     0x00,      0x00,  false},     // t 0
    {InfraredProtocolRC6,     0x00,      0x00,  true},      // t 0
    {InfraredProtocolRC6,     0xFF,      0xFF,  false},     // t 1
    {InfraredProtocolRC6,     0x7F,      0xFF,  false},     // t 0
    {InfraredProtocolRC6,     0x7F,      0xFE,  false},     // t 1
    {InfraredProtocolRC6,     0xFF,      0xFE,  false},     // t 0
    {InfraredProtocolRC6,     0xFF,      0xFF,  false},     // t 1
    {InfraredProtocolRC6,     0xFF,      0xFF,  true},      // t 1
    {InfraredProtocolRC6,     0xAA,      0x55,  false},     // t 0
    {InfraredProtocolRC6,     0x55,      0xAA,  false},     // t 1
    {InfraredProtocolRC6,     0x55,      0x55,  false},     // t 0
    {InfraredProtocolRC6,     0xAA,      0xAA,  false},     // t 1
    {InfraredProtocolRC6,     0xAA,      0xAA,  true},      // t 1

    {InfraredProtocolRC6,     0x93,      0xA0,  false},     // t 0
    {InfraredProtocolRC6,     0x93,      0xA1,  false},     // t 1
};

